name: CI/CD Pipeline

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Job de Linting e Type Checking
  lint-and-typecheck:
    name: üîç Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run backend ESLint
        working-directory: ./backend
        run: npm run lint

      - name: Run frontend ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run backend TypeScript type check
        working-directory: ./backend
        run: npm run type-check

      - name: Run frontend TypeScript type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Check backend Prettier formatting
        working-directory: ./backend
        run: npx prettier --check "src/**/*.{js,ts,json}"

      - name: Check frontend Prettier formatting
        working-directory: ./frontend
        run: npx prettier --check "src/**/*.{ts,tsx}"

  # Job de Testes Unit√°rios
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: saas_barbearias_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Setup test database
        working-directory: ./backend
        run: |
          npx prisma migrate deploy
          npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barbearias_test

      - name: Run backend tests
        working-directory: ./backend
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barbearias_test
          JWT_SECRET: test-jwt-secret-with-minimum-32-characters-for-security
          NODE_ENV: test

      - name: Run backend tests with coverage
        working-directory: ./backend
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres123@localhost:5432/saas_barbearias_test
          JWT_SECRET: test-jwt-secret-with-minimum-32-characters-for-security
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Job de An√°lise de Seguran√ßa
  security:
    name: üîí Security Analysis
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run backend security audit
        working-directory: ./backend
        run: npm audit --audit-level=moderate

      - name: Run frontend security audit
        working-directory: ./frontend
        run: npm audit --audit-level=moderate

      - name: Check backend vulnerabilities
        working-directory: ./backend
        run: npm audit --audit-level=high

      - name: Check frontend vulnerabilities
        working-directory: ./frontend
        run: npm audit --audit-level=high

  # Job de Build
  build:
    name: üèóÔ∏è Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build-artifacts
          path: backend/dist/
          retention-days: 7

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-artifacts
          path: frontend/dist/
          retention-days: 7

  # Job de Deploy (apenas na branch main)
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: backend/dist/

      - name: Deploy to production
        run: |
          echo "üöÄ Deploy seria executado aqui"
          echo "üì¶ Artefatos baixados e prontos para deploy"
          echo "üîß Configura√ß√µes de produ√ß√£o aplicadas"
          # Aqui seria implementado o deploy real (Docker, Railway, AWS, etc.)

      - name: Run production health check
        run: |
          echo "üè• Health check seria executado aqui"
          echo "‚úÖ Aplica√ß√£o funcionando corretamente"
          # curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1

      - name: Notify deployment success
        run: |
          echo "‚úÖ Deploy realizado com sucesso!"
          echo "üåê Aplica√ß√£o dispon√≠vel em produ√ß√£o"
